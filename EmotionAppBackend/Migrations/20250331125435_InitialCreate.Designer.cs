// <auto-generated />
using System;
using EmotionAppBackend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmotionAppBackend.Migrations
{
    [DbContext(typeof(EmotionAppContext))]
    [Migration("20250331125435_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Diary", b =>
                {
                    b.Property<int>("DiaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DiaryID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DiaryID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("diary");
                });

            modelBuilder.Entity("DiaryCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CategoryID");

                    b.ToTable("category");
                });

            modelBuilder.Entity("DiaryTag", b =>
                {
                    b.Property<int>("DiaryID")
                        .HasColumnType("int");

                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.HasKey("DiaryID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("DiaryTag");
                });

            modelBuilder.Entity("EmotionAppBackend.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id")
                        .HasComment("权限唯一标识");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("权限创建时间");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasComment("权限描述");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id")
                        .HasComment("父权限ID，指向permissions表自身，用于权限层级关系");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("permission_name")
                        .HasComment("权限名称，唯一标识权限");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("权限信息更新时间");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("PermissionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ParentId" }, "parent_id");

                    b.HasIndex(new[] { "PermissionName" }, "permission_name")
                        .IsUnique();

                    b.ToTable("permissions", null, t =>
                        {
                            t.HasComment("权限表，存储系统权限信息，支持权限层级关系");
                        });
                });

            modelBuilder.Entity("EmotionAppBackend.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id")
                        .HasComment("角色唯一标识");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("角色创建时间");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasComment("角色描述");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name")
                        .HasComment("角色名称，唯一标识角色");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("角色信息更新时间");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleName" }, "role_name")
                        .IsUnique();

                    b.ToTable("roles", null, t =>
                        {
                            t.HasComment("角色表，存储系统角色信息");
                        });
                });

            modelBuilder.Entity("EmotionAppBackend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasComment("用户唯一标识");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("用户创建时间");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email")
                        .HasComment("用户邮箱，唯一标识用户");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password")
                        .HasComment("用户密码");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone")
                        .HasComment("用户手机号，唯一标识用户");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("用户信息更新时间");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username")
                        .HasComment("用户名，唯一标识用户");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "phone")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "username")
                        .IsUnique();

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("用户表，存储用户的基本信息");
                        });
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id")
                        .HasComment("角色ID，关联roles表");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id")
                        .HasComment("权限ID，关联permissions表");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "PermissionId" }, "permission_id");

                    b.ToTable("role_permissions", null, t =>
                        {
                            t.HasComment("角色权限关联表，存储角色和权限的多对多关系");
                        });
                });

            modelBuilder.Entity("Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TagID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TagID");

                    b.HasIndex("UserID");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasComment("用户ID，关联users表");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id")
                        .HasComment("角色ID，关联roles表");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RoleId" }, "role_id");

                    b.ToTable("user_roles", null, t =>
                        {
                            t.HasComment("用户角色关联表，存储用户和角色的多对多关系");
                        });
                });

            modelBuilder.Entity("Diary", b =>
                {
                    b.HasOne("DiaryCategory", "Category")
                        .WithMany("Diaries")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmotionAppBackend.Models.User", "User")
                        .WithMany("Diaries")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiaryTag", b =>
                {
                    b.HasOne("Diary", null)
                        .WithMany()
                        .HasForeignKey("DiaryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tag", null)
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmotionAppBackend.Models.Permission", b =>
                {
                    b.HasOne("EmotionAppBackend.Models.Permission", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("permissions_ibfk_1");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.HasOne("EmotionAppBackend.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_permissions_ibfk_2");

                    b.HasOne("EmotionAppBackend.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_permissions_ibfk_1");
                });

            modelBuilder.Entity("Tag", b =>
                {
                    b.HasOne("EmotionAppBackend.Models.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("EmotionAppBackend.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_roles_ibfk_2");

                    b.HasOne("EmotionAppBackend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_roles_ibfk_1");
                });

            modelBuilder.Entity("DiaryCategory", b =>
                {
                    b.Navigation("Diaries");
                });

            modelBuilder.Entity("EmotionAppBackend.Models.Permission", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("EmotionAppBackend.Models.User", b =>
                {
                    b.Navigation("Diaries");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
